from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext, ContextTypes, CommandHandler, MessageHandler, filters
from database import (
    find_item, get_shelf_items, get_recent_scans, 
    add_scan_history, Item, clear_scan_history, search_items, get_all_items,
    create_scan_session, end_scan_session, get_last_successful_session, init_db, get_last_successful_sessions,
    ScanSession, Session
)
from typing import cast
import asyncio
import logging
import subprocess
import sys
import os
import time
from flight import ARUCO_LOCATIONS
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

LOCATION_TO_ARUCO = {}
for aruco_id, (shelf, position) in ARUCO_LOCATIONS.items():
    location = (f"–°—Ç–µ–ª–ª–∞–∂ {shelf}", f"–ü–æ–ª–∫–∞ {position}")
    if location not in LOCATION_TO_ARUCO:
        LOCATION_TO_ARUCO[location] = []
    LOCATION_TO_ARUCO[location].append(aruco_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.message:
        return
        
    keyboard = [
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"), KeyboardButton("üì¶ –ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é")],
        [KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üé• –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton("üìä –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # win + . –¥–ª—è —Å–º–∞–π–ª–æ–≤
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ —É—á—ë—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:

üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ - –ø–æ–∏—Å–∫ –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
üì¶ –ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é - –ø–æ–∏—Å–∫ –ø–æ —Å—Ç–µ–ª–ª–∞–∂—É/–ø–æ–ª–∫–µ
üìã –ò—Å—Ç–æ—Ä–∏—è - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
üé• –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å - –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤
üìä –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚ùì –ü–æ–º–æ—â—å - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
    """
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not update.message:
        return
        
    locations = set()
    for shelf, position in ARUCO_LOCATIONS.values():
        locations.add(f"–°—Ç–µ–ª–ª–∞–∂ {shelf}, –ü–æ–ª–∫–∞ {position}")
    locations_str = "\n".join([f"‚Ä¢ {loc}" for loc in sorted(locations)])
        
    help_text = f"""
üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ ID (–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞) –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: 12345 –∏–ª–∏ "–Ω–æ—É—Ç–±—É–∫"

üì¶ –ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì¶ –ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é"
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–ª–ª–∞–∂ –∏–ª–∏ –ø–æ–ª–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
{locations_str}

üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìã –ò—Å—Ç–æ—Ä–∏—è" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

üé• –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üé• –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –û–∫–Ω–æ —Å –∫–∞–º–µ—Ä–æ–π –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
‚Ä¢ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ESC –≤ –æ–∫–Ω–µ —Å –∫–∞–º–µ—Ä–æ–π

üìä –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

‚ùóÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
‚Ä¢ –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ ID —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞
‚Ä¢ –ü–æ–∏—Å–∫ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
‚Ä¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ ArUco –º–∞—Ä–∫–µ—Ä–∞–º
    """
    await update.message.reply_text(help_text)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    if not update.message:
        return
        
    if not context.args:
        locations = set()
        for shelf, position in ARUCO_LOCATIONS.values():
            locations.add(f"–°—Ç–µ–ª–ª–∞–∂ {shelf}, –ü–æ–ª–∫–∞ {position}")
        locations_str = "\n".join([f"‚Ä¢ {loc}" for loc in sorted(locations)])
        
        help_text = f"""
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:
/search shelf 1 - –ø–æ–∏—Å–∫ –Ω–∞ —Å—Ç–µ–ª–ª–∞–∂–µ 1
/search pos 2 - –ø–æ–∏—Å–∫ –Ω–∞ –ø–æ–ª–∫–µ 2
/search all - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã

–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:
{locations_str}
        """
        await update.message.reply_text(help_text)
        return

    try:
        if len(context.args) == 1 and context.args[0].lower() == 'all':
            items = get_all_items()
            if items:
                response = "–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
                for item in items:
                    response += f"- {item.name} (ID: {item.qr_code})\n"
                    response += f"  –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {item.shelf}, {item.position}\n"
                add_scan_history("search", None, "list_all")
            else:
                response = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞"
                add_scan_history("search", None, "empty_db")
            
            await update.message.reply_text(response)
            return

        shelf = None
        position = None
        i = 0
        while i < len(context.args):
            if context.args[i].lower() == 'shelf' and i + 1 < len(context.args):
                shelf = context.args[i + 1]
                i += 2
            elif context.args[i].lower() == 'pos' and i + 1 < len(context.args):
                position = context.args[i + 1]
                i += 2
            else:
                i += 1

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        items = search_items(shelf, position)
        
        if items:
            response = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n"
            for item in items:
                # –ù–∞—Ö–æ–¥–∏–º ArUco ID –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                location = (item.shelf, item.position)
                aruco_ids = LOCATION_TO_ARUCO.get(location, [])
                aruco_str = f" (ArUco ID: {', '.join(map(str, aruco_ids))})" if aruco_ids else ""
                
                response += f"- {item.name} (ID: {item.qr_code})\n"
                response += f"  –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {item.shelf}, {item.position}{aruco_str}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            search_params = []
            if shelf:
                search_params.append(f"—Å—Ç–µ–ª–ª–∞–∂ {shelf}")
            if position:
                search_params.append(f"–ø–æ–ª–∫–∞ {position}")
            add_scan_history("search", None, f"found: {', '.join(search_params)}")
        else:
            search_params = []
            if shelf:
                search_params.append(f"—Å—Ç–µ–ª–ª–∞–∂ {shelf}")
            if position:
                search_params.append(f"–ø–æ–ª–∫–∞ {position}")
            response = f"–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: {', '.join(search_params)})"
            add_scan_history("search", None, "not_found")
        
        await update.message.reply_text(response)
                
    except Exception as e:
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}"
        logger.error(error_msg)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def recent_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recent - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    if not update.message:
        return

    try:
        text = update.message.text if update.message.text else ""
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ /recent
        if text == "/recent":
            keyboard = [
                [KeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π")],
                [KeyboardButton("üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è")],
                [KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return
            
        show_all = text == "üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è"
        limit = None if show_all else 10
        recent_scans = get_recent_scans(limit)
        
        if not recent_scans:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
            return
            
        response = f"üìã {'–í—Å—è –∏—Å—Ç–æ—Ä–∏—è' if show_all else '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10'} –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
        
        db_session = Session()
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–µ—Å—Å–∏—è–º
            current_session = None
            
            for scan in recent_scans:
                if scan.session_uuid != current_session:
                    current_session = scan.session_uuid
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –ú–°–ö (UTC+3)
                msk_time = scan.timestamp + timedelta(hours=3)
                time_str = msk_time.strftime("%d.%m.%Y %H:%M")
                
                operation_type = {
                    'scan': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR',
                    'find': '–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞',
                    'search': '–ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é',
                    'clear': '–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏'
                }.get(scan.operation, scan.operation)
                
                if scan.result.startswith('success'):
                    if scan.item_id:
                        item = db_session.query(Item).get(scan.item_id)
                        if item:
                            result = f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {item.name} (QR: {item.qr_code})"
                        else:
                            result = "‚úÖ –£—Å–ø–µ—à–Ω–æ"
                    else:
                        result = "‚úÖ –£—Å–ø–µ—à–Ω–æ"
                elif scan.result.startswith('not_found'):
                    search_term = scan.result.split(': ')[-1] if ': ' in scan.result else ''
                    result = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ{f' ({search_term})' if search_term else ''}"
                elif scan.result == 'stopped':
                    result = "üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                else:
                    result = f"‚ÑπÔ∏è {scan.result}"
                
                session_info = ""
                if scan.session_uuid:
                    scan_session = db_session.query(ScanSession).filter_by(session_uuid=scan.session_uuid).first()
                    if scan_session:
                        session_info = f" (–°–µ—Å—Å–∏—è: {scan_session.session_uuid[:8]})"
                
                response += f"üïí {time_str}\n"
                response += f"üìå {operation_type}{session_info}\n"
                response += f"{result}\n\n"
        finally:
            db_session.close()
        
        keyboard = [
            [KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"), KeyboardButton("üì¶ –ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é")],
            [KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üé• –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton("üìä –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        max_length = 4096
        if len(response) > max_length:
            parts = [response[i:i + max_length] for i in range(0, len(response), max_length)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await update.message.reply_text(part, reply_markup=reply_markup)
                else:
                    await update.message.reply_text(part)
        else:
            await update.message.reply_text(response, reply_markup=reply_markup)
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        logger.error(error_msg)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
    if not update.message:
        return
        
    if clear_scan_history():
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")

async def find_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find"""
    if not update.message:
        return
        
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\n–ü—Ä–∏–º–µ—Ä: /find 12345")
        return

    search_query = ' '.join(context.args)
    item = find_item(search_query)
    
    if item:
        response = f"–ü—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω!\n–ù–∞–∑–≤–∞–Ω–∏–µ: {item.name}\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {item.shelf}, {item.position}"
        item_id = cast(int, item.id) if isinstance(item, Item) else None
        add_scan_history("find", item_id, "success")
    else:
        response = "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        add_scan_history("find", None, f"not_found: {search_query}")
    
    await update.message.reply_text(response)

async def scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            init_db(check_existing=True)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return
            
        chat_id = update.effective_chat.id
        scan_session = create_scan_session()
        
        # –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        qr_script_path = os.path.join(os.path.dirname(__file__), "flight.py")
        
        if not os.path.exists(qr_script_path):
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {qr_script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        startupinfo = None
        if os.name == 'nt':
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
            startupinfo.wShowWindow = 1
        
        subprocess.Popen(
            [sys.executable, qr_script_path, str(chat_id), scan_session.session_uuid],
            creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == 'nt' else 0,
            startupinfo=startupinfo
        )
        
        await update.message.reply_text("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ESC –≤ –æ–∫–Ω–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return

async def last_scan_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /last_scan_report - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥—Ä–æ–Ω–∞"""
    if not update.message:
        return
        
    keyboard = [
        [KeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç"), KeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç—á–µ—Ç–∞")],
        [KeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç—á–µ—Ç–æ–≤"), KeyboardButton("üìä –í—Å–µ –æ—Ç—á–µ—Ç—ã")],
        [KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if update.message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        keyboard = [
            [KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"), KeyboardButton("üì¶ –ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é")],
            [KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üé• –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton("üìä –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return
    
    text = update.message.text.lower()
    if "–ø–æ—Å–ª–µ–¥–Ω–∏–µ" in text and any(str(num) in text for num in ["3", "5"]):
        limit = 3 if "3" in text else 5
    elif "–≤—Å–µ" in text:
        limit = 100
    else:
        limit = 1
    
    sessions_data = get_last_successful_sessions(limit)
    
    if not sessions_data:
        await update.message.reply_text(
            "üìä –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥—Ä–æ–Ω–∞", 
            reply_markup=reply_markup
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
    response = f"üìä –û—Ç—á–µ—Ç –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(sessions_data)} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö:\n\n"
    
    for session_num, (session, items) in enumerate(sessions_data, 1):
        if session_num > 1:
            response += "\n" + "=" * 30 + "\n\n"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –ú–°–ö (UTC+3)
        msk_time = session.start_time + timedelta(hours=3)
        response += f"üïí –°–µ—Å—Å–∏—è {session_num} ({msk_time.strftime('%d.%m.%Y %H:%M')})\n"
        
        items_by_location = {}
        for item in items:
            location = (item.shelf, item.position)
            if location not in items_by_location:
                items_by_location[location] = []
            items_by_location[location].append(item)
        
        total_items = sum(len(items) for items in items_by_location.values())
        response += f"üì¶ –£—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_items} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n\n"
        
        for location, items in sorted(items_by_location.items()):
            shelf, position = location
            response += f"\nüìç {shelf}, {position}:\n"
            for item in items:
                qr_num = ''.join(filter(str.isdigit, item.qr_code))
                response += f"- {item.name} (QR ID: {qr_num})\n"
    
    max_length = 4096
    if len(response) > max_length:
        parts = [response[i:i + max_length] for i in range(0, len(response), max_length)]
        for i, part in enumerate(parts):
            if i == 0:
                await update.message.reply_text(part, reply_markup=reply_markup)
            else:
                await update.message.reply_text(part)
    else:
        await update.message.reply_text(response, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return

    text = update.message.text

    if text == "/":
        keyboard = [
            [KeyboardButton("/start –°–ø—Ä–∞–≤–∫–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", 
            reply_markup=reply_markup
        )
        return

    if text == "/start –°–ø—Ä–∞–≤–∫–∞":
        await start(update, context)
        return

    if text == "üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤":
        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ü–æ ID: 12345\n"
            "‚Ä¢ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é: –ù–æ—É—Ç–±—É–∫\n"
        )
    elif text == "üì¶ –ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é":
        keyboard = []
        shelves = set()
        positions = set()
        
        for shelf, position in ARUCO_LOCATIONS.values():
            shelves.add(f"–°—Ç–µ–ª–ª–∞–∂ {shelf}")
            positions.add(f"–ü–æ–ª–∫–∞ {position}")
        
        for shelf in sorted(shelves):
            keyboard.append([KeyboardButton(shelf)])
            
        for position in sorted(positions):
            keyboard.append([KeyboardButton(position)])
            
        keyboard.append([KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"), KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:", 
            reply_markup=reply_markup
        )
    elif text == "üìã –ò—Å—Ç–æ—Ä–∏—è":
        keyboard = [
            [KeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π")],
            [KeyboardButton("üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    elif text == "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π" or text == "üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è":
        await recent_command(update, context)
    elif text == "üé• –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å":
        await scan_command(update, context)
    elif text == "üìä –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏":
        keyboard = [
            [KeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç"), KeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç—á–µ—Ç–∞")],
            [KeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç—á–µ—Ç–æ–≤"), KeyboardButton("üìä –í—Å–µ –æ—Ç—á–µ—Ç—ã")],
            [KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=reply_markup)
    elif text == "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç" or text == "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç—á–µ—Ç–∞" or text == "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç—á–µ—Ç–æ–≤" or text == "üìä –í—Å–µ –æ—Ç—á–µ—Ç—ã":
        await last_scan_report_command(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        keyboard = [
            [KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"), KeyboardButton("üì¶ –ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é")],
            [KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üé• –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton("üìä –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    elif text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        keyboard = [
            [KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"), KeyboardButton("üì¶ –ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é")],
            [KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üé• –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton("üìä –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    elif text.startswith("–°—Ç–µ–ª–ª–∞–∂"):
        shelf = text.split()[1]
        items = search_items(shelf, None)
        if items:
            response = f"–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —Å—Ç–µ–ª–ª–∞–∂–µ {shelf}:\n\n"
            for item in items:
                qr_num = ''.join(filter(str.isdigit, item.qr_code))
                response += f"- {item.name} (QR ID: {qr_num})\n"
                response += f"  –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {item.shelf}, {item.position}\n"
        else:
            response = f"–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —Å—Ç–µ–ª–ª–∞–∂–µ {shelf} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        await update.message.reply_text(response)
    elif text.startswith("–ü–æ–ª–∫–∞"):
        position = text.split()[1]
        items = search_items(None, position)
        if items:
            response = f"–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –ø–æ–ª–∫–µ {position}:\n\n"
            for item in items:
                qr_num = ''.join(filter(str.isdigit, item.qr_code))
                response += f"- {item.name} (QR ID: {qr_num})\n"
                response += f"  –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {item.shelf}, {item.position}\n"
        else:
            response = f"–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –ø–æ–ª–∫–µ {position} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        await update.message.reply_text(response)
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ":
        items = get_all_items()
        if items:
            response = "–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
            for item in items:
                qr_num = ''.join(filter(str.isdigit, item.qr_code))
                response += f"- {item.name} (QR ID: {qr_num})\n"
                response += f"  –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {item.shelf}, {item.position}\n"
        else:
            response = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞"
        await update.message.reply_text(response)
    else:
        item = find_item(text)
        if item:
            qr_num = ''.join(filter(str.isdigit, item.qr_code))
            response = f"""–ü—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω!
–ù–∞–∑–≤–∞–Ω–∏–µ: {item.name}
QR ID: {qr_num}
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {item.shelf}, {item.position}"""
            item_id = cast(int, item.id) if isinstance(item, Item) else None
            add_scan_history("find", item_id, "success")
        else:
            response = "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            add_scan_history("find", None, f"not_found: {text}")
        await update.message.reply_text(response) 

